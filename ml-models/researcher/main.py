# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kph9rlqFpITh54XSQnF7PEEn8v559c7-
"""

import json
import pandas as pd
from sklearn.neighbors import NearestNeighbors
import pickle

df = pd.read_csv('researcher_grant_scheme.csv')

# df.head()

#feature Encoding
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
df['research_area']=le.fit_transform(df['research_area'])
df['eligible']=le.fit_transform(df['eligible'])
df['grant_amt']=le.fit_transform(df['grant_amt'])
df['app_dead']=le.fit_transform(df['app_dead'])
# df.head()

# Initialize KNN model
knn = NearestNeighbors(n_neighbors=5, metric='euclidean')

# Fit KNN model on selected columns
knn.fit(df)

# Function to recommend similar profiles
def recommend_scheme(scheme_id):
    # Get researcher data
    scheme_data = df.loc[scheme_id, :].values.reshape(1,-1)

    # Find similar scheme using KNN model
    _, neighbor_indices = knn.kneighbors(scheme_data)

    recommend_schemes   = []
    # Print recommended scheme
    print('scheme similar to scheme ID {}:'.format(scheme_id))
    for i, idx in enumerate(neighbor_indices[0][1:]):
        # print('{}. scheme ID {} with similarity score of {}'.format(i+1, idx, _[0][i+1]))
        # recommend_schemes.append(idx)
        scheme = df.loc[idx].to_dict()
        recommend_schemes.append(scheme)
    # return recommend_schemes
    
    json_data = json.dumps(recommend_schemes)
    
    return json_data

# Example usage: recommend scheme similar to Researcher ID 10
print(recommend_scheme(10))
